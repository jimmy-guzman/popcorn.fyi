import { Button } from "@popcorn.fyi/ui/button";
import { cn } from "@popcorn.fyi/ui/utils";
import { useState } from "react";

import { Prose } from "../shared/prose";

interface ExpandedPlotProps {
  summaries?: {
    long: {
      spoiler?: string | undefined;
      text: string;
    }[];
  };
}

export const ExpandedPlot = ({ summaries }: ExpandedPlotProps) => {
  const [expanded, setExpanded] = useState(1);
  const [showSpoilers, setShowSpoilers] = useState(false);

  const summary = summaries?.long;
  const displayedSummary = summary?.slice(0, expanded);

  return (
    <div className="flex w-full flex-col gap-4">
      <Prose>
        <h2 id="expanded">Expanded Plot</h2>
      </Prose>
      <div className="bg-base-200 flex items-center justify-between gap-4 rounded-lg px-4 py-2">
        <label className="dsy-label flex items-center gap-2">
          <span>Reveal Spoilers</span>
          <input
            checked={showSpoilers}
            className="dsy-toggle"
            onChange={() => {
              setShowSpoilers((prev) => !prev);
            }}
            type="checkbox"
          />
        </label>
        <p className="flex items-center gap-1 text-sm italic text-gray-400">
          <span className="icon-[lucide--bot] h-4 w-4" />
          This content was generated by AI.
        </p>
      </div>

      <Prose>
        {displayedSummary?.map((section) => {
          return (
            <p key={section.text}>
              {section.text}
              {section.spoiler ? (
                <span
                  className={cn(
                    "cursor-pointer transition",
                    showSpoilers ? "" : "blur-sm hover:blur-none",
                  )}
                >
                  {" "}
                  {section.spoiler}
                </span>
              ) : null}
            </p>
          );
        })}
      </Prose>
      <div className="flex justify-start">
        {summary && summary.length > expanded ? (
          <Button
            onClick={() => {
              setExpanded((prev) => Math.min(prev + 1, summary.length));
            }}
            variant="ghost"
          >
            Read More
            <span className="icon-[lucide--chevron-down] h-4 w-4" />
          </Button>
        ) : expanded > 1 ? (
          <Button
            onClick={() => {
              setExpanded(1);
            }}
            variant="ghost"
          >
            Read Less
            <span className="icon-[lucide--chevron-up] h-4 w-4" />
          </Button>
        ) : null}
      </div>
    </div>
  );
};
